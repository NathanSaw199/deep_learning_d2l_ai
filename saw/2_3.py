import torch
#x is a scalar tensor with value 3.0
# x= torch.tensor([3.0])
# # y is a scalar tensor with value 2.0
# y= torch.tensor([2.0])

# print(x+y, x-y, x*y, x/y, x**y)
# X = torch.arange(3)
# # print(X)
# # print(X[0])
# # print(len(X))
# print(X.shape)  
# A = torch.arange(9).reshape(3,3)
# print(A)
# #transpose of A ( swap rows and columns)
# print(A.T)
# A = torch.tensor([[1,2,3],
#                   [4,5,6],
#                   [7,8,9]])
# print(A.T)
# print(A == A.T)
# print(torch.arange(12).reshape(2, 2, 3))

# A = torch.arange(20,dtype=torch.float32).reshape(2,10)
# print(A)
# # print(A.shape,A.sum())
# print(A.shape, A.sum(axis=1).shape)
# print(A.shape, A.sum(axis=0).shape)
# B = A.clone()
# print(f"{A}\n, {A+B}")
# print(A*B)
# a = 3
# X = torch.arange(24).reshape(2,3,4)
# print(X)
# print(f"final tensor: {a+X},\n multiplied tensor: {(a*X).shape}")
# X = torch.arange(3,dtype=torch.float32)
# print(X,X.sum())
# print(A.sum(axis =[0,1])==A.sum())
# print(A.sum(axis =[0,1]))
# print(A.sum())
# A = torch.arange(4,dtype=torch.float32).reshape(2,2)
# print(A)
# print(f"a mean {A.mean()},a sum by numbers of elements {A.sum()/A.numel()}")
# A = torch.arange(6, dtype=torch.float32).reshape(2, 3)
# print(A)
# # print(A.mean(axis=0),A.sum(axis=0)/A.shape[0])
# # print(A.shape[0])
# sum_A = A.sum(axis=1, keepdims=True)
# print(sum_A, sum_A.shape)
# print(A/sum_A)
# A = torch.arange(12, dtype=torch.float32).reshape(4, 3)
# print(A)
# print(A.cumsum(axis=0))
# y = torch.ones(5, dtype=torch.float32)
# x = torch.arange(5, dtype=torch.float32)
# print(x, y, torch.dot(x, y))    
# print(torch.sum(x * y))
# A = torch.arange(12, dtype=torch.float32).reshape(4, 3)
# print(A)
# B= torch.ones(3,4)
# print(B)
# print(torch.mm(B,A))
A = torch.arange(8, dtype=torch.float32).reshape(2, 4)
print(A)
x = torch.arange(4, dtype=torch.float32)
print(x)
#[0., 1., 2., 3.] x [0., 1., 2., 3.] = 14,[4., 5., 6., 7.]]x[0., 1., 2., 3.] = 38 dot product
print(A.shape, x.shape, torch.mv(A, x), A@x)

# print(A@B)
